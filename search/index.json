[{"content":"搜索专题 搜索算法，包括深度优先搜索和广度优先搜索，从起点开始，逐渐扩大寻找范围，直到找到需要的答案为止。 严格来说，搜索算法也算是一种暴力枚举策略，但是其算法特性决定了效率比直接的枚举所有答案要高，因为搜索可以跳过一些无效状态，降低问题规模。在算法竞赛中，如果选手无法找到一种高效求解的方法（比如贪心、递推、动态规划、公式推导等），使用搜索也可以解决一些规模较小的情况；而有的任务就是必须使用搜索来完成，因此这是相当重要的策略。\n一、深度优先搜索 深度优先搜索的特性：\n搜索过程中会沿着一条路径一直走到底，直到不能走为止，然后退回到上一个节点，继续搜索。 搜索使用到的数据结构是栈，可以使用递归实现，草稿时可以画出一个树状结构来辅助理解。 根据树状结构图，我们可以得出搜索的两个基本点，一个是位置有多少，一个是每个位置上有多少中选择 空间复杂度大概就是o(h),h为树高 深度优先搜索具有三种基本形式：\n指数级枚举 对于一个位置，有若干种选择，他能选择其中的任何一种，接着下一个位置同样能选择其中的任何一种，不会因为已选择位置的增加而使方案选择变少，若有n个位置，每个位置有m种选择，则总方案数为m^n。时间复杂度大概就是o（m^n）。 题型 迷宫问题和洪水填充模型，但这类问题得数据量很小才能用dfs，更好的方法是用bfs。 一些简单的指数级枚举递归题目，比如P2036|P2089 代码模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 void dfs(int x)//x表示当前位置,一般从1开始 { if(x\u0026gt;n) //n代表位置的总数 { //根据题目做一些操作 return; } for(int i=1;i\u0026lt;=m;i++)//m代表每个位置能选择m种方案 { arr[x]=1; //一般会开个数组代表当前位置的选择,1代表选择，0代表未考虑 dfs(x+1); arr[x]=0; //代表恢复 } //如果题目只有两种选择，选或者不选，也可以不用for //选 arr[x]=1; dfs(x+1); arr[x]=0; //不选 arr[x]=2; dfs(x+1); arr[x]=0; } 以P2036为例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; struct pos { int bitter; int sour; }; struct pos a[20]; int st[20]; int n; int minn = 1e9; void dfs(int x); int main(void) { cin \u0026gt;\u0026gt; n; for (int i = 1; i \u0026lt;= n; i++) { cin \u0026gt;\u0026gt; a[i].sour \u0026gt;\u0026gt; a[i].bitter; } dfs(1); cout \u0026lt;\u0026lt; minn \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; return 0; } void dfs(int x) { if (x \u0026gt; n) { bool flag = false; int sum = 0; int mut = 1; for (int i = 1; i \u0026lt;= n; i++) { if (st[i] == 1) { sum += a[i].bitter; mut *= a[i].sour; flag = true; } } if (flag) { minn = min(minn, abs(sum - mut)); } return; } st[x] = 1; // 1代表选，2代表不选,0代表未考虑 dfs(x + 1);//这一题只有两种选择，所以直接这样 st[x] = 0; st[x] = 2; dfs(x + 1); st[x] = 0; } 排列型枚举 对于一个位置，有若干种方案选择，他选择了一种，接着下一个位置就只能选择剩下的方案，方案因此逐次递减 题型 N皇后问题（简单的版本是棋盘问题） 分析： 1.将行视为位置，列视为选择，画出递归树 2.使用排列枚举方式进行枚举，能够实现每行每列只放一个棋子 3.使用一个一维数组来记录对于列的选择情况 棋盘问题acwing1114的代码模板：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; const int N = 15; char g[N][N]; bool st[N]; // 记录已经选过的列 int n, m; // n为几阶方阵，m为棋数目 int res = 0; // 记录方案数 void dfs(int x, int cnt); // x代表第几行，从第一行开始，每个位置有n种选择，并且是排列枚举， // 根据st数组来判断这一列（即选择）是否已经被选过,cnt代表已经选了几个棋子 int main(void) { while (scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m) != EOF) { if (n == -1 \u0026amp;\u0026amp; m == -1) { break; } cin.ignore(); for (int i = 0; i \u0026lt; n; i++) { scanf(\u0026#34;%s\u0026#34;, g[i]); } res = 0; dfs(0, 0); cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } return 0; } void dfs(int x, int cnt) { if (cnt == m) { res++; return; } if (x \u0026gt; n - 1) { return; } for (int i = 0; i \u0026lt; n; i++) { if (!st[i] \u0026amp;\u0026amp; g[x][i] == \u0026#39;#\u0026#39;) { st[i] = true; dfs(x + 1, cnt + 1); st[i] = false; } } dfs(x + 1, cnt); // 表示这行我们不放棋子，直接进入下一行 } 八皇后问题的代码模板： 待补充\n代码模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int st[N]; //N代表位置的总数所能填写的最大值 void dfs(int x)// x代表当前位置，一般从1开始 { if(x\u0026gt;n) { //根据题目做一些操作 return; } for(int i=1;i\u0026lt;=m;i++)//m代表每个位置能选择m种方案 { if(!st[i]) { st[i]=1; arr[x]=1; dfs(x+1); arr[x]=0; //恢复 st[i]=0; } } } 组合型枚举 对于一个位置，有若干种方案选择，他选择了一种，接着下一个位置能选择的方案必须大于上一个位置选择的方案，这里的大于是指字典序，所以这类题会与数字和字母有关 例题P1025 代码模板（以P1025为例） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; // 组合枚举 void dfs(int x, int start, int sum); // x代表从位置几开始枚举，start代表枚举数字的起点 int n, k; int res = 0; int main(void) { cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; k; dfs(1, 1, 0); cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; return 0; } void dfs(int x, int start, int sum) { if (x \u0026gt; k) { if (sum == n) { res++; } return; } for (int i = start; sum + (k - x + 1) * i \u0026lt;= n; i++) { dfs(x + 1, i, sum + i); } } /*注意，这题如果不进行剪枝操作，会TLE，sum+(k-x+1)*i\u0026lt;=n是剪枝操作 这说的是，如果当前的和加上剩下的数大于n 那么就没有必要继续枚举了 因为我们的位置是要全选完的 所以这种情况绝对最后数会大于n，直接剪枝*/ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void dfs(int x,int start)//x代表从位置几开始枚举，start代表枚举数字的起点 { if(x\u0026gt;n) { //根据题目做一些操作 return; } for(int i=start;i\u0026lt;=m;i++)//m代表每个位置能选择m种方案 { arr[x]=i; dfs(x+1,i+1); /*如果是要求下一个选的数大于等于上一个选的数 那么可以dfs（x+1，i）*/ arr[x]=0; //恢复 } } 二、广度优先搜索 广度优先搜索的特性：\n用于图的查找算法（要求能用图表示出问题的关联性）\nBFS可以用于解决两类问题：\n从A出发是否存在到达B的路径 DFS也可求 从A出发到达B的最短路径 DFS如果数据少也可以考虑 BFS是一种用空间换时间的算法，空间复杂度大概为o（2^h），h代表树的高度，2为每次分出来的支数，以二叉树为例\nBFS使用的数据结构是队列，可以使用STL中的queue来实现\n画出一个树状结构图，每一层都会有若干个节点，每个节点又会有若干个分支，bfs的思路就是从根节点（或者其他节点）开始，访问先访问其直接相连的子节点，若子节点不符合，再访问其子节点的子节点，按级别顺序（一层一层）依次访问，直到访问到目标节点\n起始：将起点（源点，树的根节点）放入队列中 扩散：从队列中取出队头的结点，将它的相邻结点放入队列，不断重复这一步 终止：当队列为空时，说明我们遍历了所有的结点，整个图都被搜索了一遍 这种搜索方法，形象点说就像一个水波纹，从源点开始，一层一层的扩散，直到扩散到终点\n对于所有边长度相同的情况，比如地图的模型，bfs第一次遇到目标点，此时就一定是从根节点到目标节点的最短路径（因为每一次所有点都是向外扩张一步，你先遇到，一定就最短）。但是，如果是加权边1的话就会出问题了，bfs传回的是经过边数最少的解，但是因为加权了，这个解到根节点的距离不一定是最短的。比如1000+1000是只有两段，1+1+1+1有4段，由于BFS返回的是经过边数最少的解，所以会返回1000+1000的解，此时我们要采用dijkstra最短路算法2解决加权路径的最短路问题。\n例题： acwing844.走迷宫是经典模板题，然鹅要钱，所以题目平替用P1746 因为都是一个思想，所以我们贴上走迷宫的代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; typedef pair\u0026lt;int, int\u0026gt; PII; #define x first #define y second const int N = 110; int g[N][N]; int n, m; int dis[N][N]; // 存储每个点到起点的距离 int dx[] = {-1, 0, 1, 0}; int dy[] = {0, 1, 0, -1}; // 向量数组，四个方向 上右下左 queue\u0026lt;PII\u0026gt; q; // 存坐标 int bfs(int x1, int y1); int main(void) { cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; for (int i = 1; i \u0026lt;= n; i++) { for (int j = 1; j \u0026lt;= m; j++) { cin \u0026gt;\u0026gt; g[i][j]; } } int res = bfs(1, 1); cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; return 0; } int bfs(int x1, int y1) { // 使用队列模拟广度优先搜索,从起点开始 memset(dis, -1, sizeof(dis)); // 初始化为-1，-1代表与起点不连通，即是1的位置 q.push({x1, y1}); dis[x1][y1] = 0; // 起始点为0 while (q.size()) { PII t = q.front(); // 取出队头 q.pop(); // 弹出 for (int i = 0; i \u0026lt; 4; i++) { int a = t.x + dx[i]; // 上右下左 int b = t.y + dy[i]; if (a \u0026lt; 1 || a \u0026gt; n || b \u0026lt; 1 || b \u0026gt; m) // 越界 continue; if (g[a][b] != 0) continue; if (dis[a][b] \u0026gt; 0) continue; q.push({a, b}); /* 入队，根据上右下左，满足的条件的进去 然后以上右下左的顺序出队 假设入队了一个右的，一个下的， 右的先出队就把右的下一个能入队的入队，然后下的再出队 这样就保证了广度优先而不是深度优先, 即一层一层的出队，而不是一条路走到黑*/ dis[a][b] = dis[t.x][t.y] + 1; // 保证了距离是前一个能走的点的距离+1 if (a == n \u0026amp;\u0026amp; b == m) return dis[n][m]; } } return dis[n][m]; } 代码分析、一些常用的习惯：\n向量数组，如果我们要遍历四个方向，我们可以使用向量数组来遍历，这样可以减少代码量并且简洁，假如有斜上方向就是八个了，一般来说以上右下左的方式看，并且我们规定x指向下方，y指向右方（数学中的坐标系顺时针转90°） #define pair\u0026lt;int,int\u0026gt; PII ，这样就可以使用PII来代替pair\u0026lt;int,int\u0026gt;，可以简洁一些 memset，用于初始化数组，第一个参数是数组名，第二个参数是要赋的值，第三个参数是要赋的值的类型，系统用字节数量来判断，所以用sizeof（） 队列实现bfs，为何用队列？正如以上所说，我们需要一层层去遍历到所有结点，那么相邻结点的访问顺序如何确定呢？因此我们就需要一个数据结构去存储和操作，需要使先遍历到的结点先被存储，直到当前层都被存储之后，按照存储的先后顺序，先被存储的结点也会被先取出来，继续遍历他的子节点\u0026ndash;\u0026gt;综上所述，需要一种特点为先进先出的数据结构，也就是队列 后续施工中 加权边的意思是给边长度赋值，原本边长度都默认为1，结果加权边给他们赋不同的值，100，500，600这样子\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ndijkstra算法可以在图论的相关学习中学到\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-12-08T00:00:00Z","permalink":"https://baozi.github.io/p/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98/","title":"算法学习-搜索专题"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://baozi.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"https://baozi.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://baozi.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://baozi.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://baozi.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu10664154974910995856.jpg","permalink":"https://baozi.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://baozi.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://baozi.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"https://baozi.github.io/p/emoji-support/","title":"Emoji Support"}]